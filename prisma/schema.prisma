datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id                                               String         @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  name                                             String         @unique @map("username") @db.VarChar(20)
  password                                         String?         
  email                                            String         @unique @map("email") @db.VarChar(255)
  emailVerified                                    DateTime?
  image                                            String?
  profile_img_id                                   String?        @db.Uuid
  role_id                                          String         @db.Uuid @default("dfe6a33c-8e5a-11ec-83e4-dfd791fcd944")
  last_login_timestamp                             DateTime       @default(now()) @db.Timestamptz(6)
  createdAt                                        DateTime       @default(now()) @map("create_timestamp") @db.Timestamptz(6)
  img                                              img?           @relation("imgTousers", fields: [profile_img_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles                                            roles?         @relation("rolesTousers", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  follow_post                                      follow_post[]  @relation("follow_postTousers")
  follow_user_follow_user_followed_users_idTousers follow_user[]  @relation("follow_user_followed_users_idTousers")
  follow_user_follow_user_users_idTousers          follow_user[]  @relation("follow_user_users_idTousers")
  notification                                     notification[] @relation("notificationTousers")
  post                                             post[]         @relation("postTousers")
  post_comment                                     post_comment[] @relation("post_commentTousers")

  Session Session[]
  @@map("users")
  Account Account[]
}

model category {
  id                              String  @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  pin_post_id                     String? @db.Uuid
  profile_img_id                  String? @db.Uuid
  color                           String  @db.VarChar(7)
  title                           String  @unique @db.VarChar(20)
  description                     String? @db.VarChar(60)
  post_count                      Int
  sort_order                      Int     @unique
  post_category_pin_post_idTopost post?   @relation("category_pin_post_idTopost", fields: [pin_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  img                             img?    @relation(fields: [profile_img_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_categoryTopost_category_id post[]  @relation("categoryTopost_category_id")
}

model follow_post {
  id               String   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  users_id         String   @db.Uuid
  post_id          String   @db.Uuid
  create_timestamp DateTime @default(now()) @db.Timestamptz(6)
  post             post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users            Users    @relation("follow_postTousers", fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model follow_user {
  id                                         String   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  users_id                                   String   @db.Uuid
  followed_users_id                          String   @db.Uuid
  create_timestamp                           DateTime @default(now()) @db.Timestamptz(6)
  users_follow_user_followed_users_idTousers Users    @relation("follow_user_followed_users_idTousers", fields: [followed_users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_follow_user_users_idTousers          Users    @relation("follow_user_users_idTousers", fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model img {
  id       String     @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  url      String     @unique
  hash     String     @unique
  category category[]
  post     post[]
  users    Users[]    @relation("imgTousers")
}

model notification {
  id               String   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  users_id         String   @db.Uuid
  icon             String   @db.VarChar(20)
  context          String
  viewed           Boolean
  create_timestamp DateTime @default(now()) @db.Timestamptz(6)
  users            Users    @relation("notificationTousers", fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model post {
  id                                  String         @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  post_users_id                       String         @db.Uuid
  category_id                         String         @db.Uuid
  head_img_id                         String?        @db.Uuid
  title                               String         @db.VarChar(60)
  context                             String         @db.VarChar(65535)
  view_count                          Int
  follow_count                        Int
  comment_count                       Int
  visibility                          Boolean
  create_timestamp                    DateTime       @default(now()) @db.Timestamptz(6)
  category_categoryTopost_category_id category       @relation("categoryTopost_category_id", fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  img                                 img?           @relation(fields: [head_img_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                               Users          @relation("postTousers", fields: [post_users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category_category_pin_post_idTopost category[]     @relation("category_pin_post_idTopost")
  follow_post                         follow_post[]
  post_comment                        post_comment[]
}

model post_comment {
  id                 String         @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  post_users_id      String         @db.Uuid
  post_id            String         @db.Uuid
  parent_comment_id  String?        @db.Uuid
  context            String         @db.VarChar(65535)
  visibility         Boolean
  create_timestamp   DateTime       @default(now()) @db.Timestamptz(6)
  post_comment       post_comment?  @relation("post_commentTopost_comment_parent_comment_id", fields: [parent_comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post               post           @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              Users          @relation("post_commentTousers", fields: [post_users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_post_comment post_comment[] @relation("post_commentTopost_comment_parent_comment_id")
}

model roles {
  id         String  @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  role_name  String  @unique @db.VarChar(20)
  permission String
  users      Users[] @relation("rolesTousers")
}

model Account {
  id                 String  @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  userId             String  @map("users_id") @db.Uuid
  type               String
  provider           String  @map("oauth_type")
  providerAccountId  String  @map("openid")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  users Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("oauth")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  users        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
